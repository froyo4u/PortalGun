plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name 'Fabric'
            url 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
        maven { url 'https://hephaestus.dev/release' }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
        maven { url 'https://maven.shedaniel.me' }
        maven { url 'https://maven.fabricmc.net/io/github/prospector/modmenu' }
        maven { url 'https://maven.terraformersmc.com/releases/' }

        jcenter()
    }


    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    archivesBaseName = project.archives_base_name
    version = project.mod_version
    group = project.maven_group

    loom {
        accessWidenerPath = file("src/main/resources/portalgun.accesswidener")
    }

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        modImplementation ('com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:1.18-SNAPSHOT'){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
        include 'com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:1.18-SNAPSHOT'

        modImplementation ('com.github.qouteall.ImmersivePortalsMod:q_misc_util:1.18-SNAPSHOT'){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
        include 'com.github.qouteall.ImmersivePortalsMod:q_misc_util:1.18-SNAPSHOT'

        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

        modImplementation 'software.bernie.geckolib:geckolib-fabric-1.18:3.0.35'

        modImplementation('com.terraformersmc:modmenu:3.1.0')

        modApi("me.shedaniel.cloth:cloth-config-fabric:6.2.57") {
            exclude(group: "net.fabricmc.fabric-api")
        }
        include("me.shedaniel.cloth:cloth-config-fabric:6.2.57")

        // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
        // You may need to force-disable transitiveness on them.
    }

    shadowJar {
        dependencies {
            exclude(dependency("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"))
            exclude(dependency("net.fabricmc:fabric-loader:${project.loader_version}"))
        }
    }
    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}-mc${project.minecraft_version}-fabric.jar"
        }
    }
    processResources {
		inputs.property "version", project.version
		
		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

task additionalCopy(type:Copy){
    from file("${project.buildDir}/libs/$archivesBaseName-${version}-mc${project.minecraft_version}-fabric.jar")
    into file("${project.buildDir}/to_upload")
}

task printClasspath {
    doLast {
        configurations.compileClasspath.each { println "\""+ (it.toString().replace("\\","/")) + "\"," }
    }
}